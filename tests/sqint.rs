// SPDX-FileCopyrightText: 2023 Jonathan Haigh <jonathanhaigh@gmail.com>
//
// SPDX-License-Identifier: MIT

use integration_test_util::{test_simple_query_err, test_simple_query_ok};

mod integration_test_util;

test_simple_query_ok!(
    sqint_to_primitive,
    u64_max, "<int(18446744073709551615)", json!(u64::MAX);
    i64_max, "<int(9223372036854775807)", json!(i64::MAX);
    i64_min, "<int(-9223372036854775808)", json!(i64::MIN);
);

test_simple_query_ok!(
    sqint_string,
    u64_max, "<int(18446744073709551615).<string", json!("18446744073709551615");
    i64_max, "<int(9223372036854775807).<string", json!("9223372036854775807");
    i64_min, "<int(-9223372036854775808).<string", json!("-9223372036854775808");
    i128_max, "<int(170141183460469231731687303715884105727).<string", json!("170141183460469231731687303715884105727");
    i128_min, "<int(-170141183460469231731687303715884105728).<string", json!("-170141183460469231731687303715884105728");
    u64_max_base2, "<int(18446744073709551615).<string(2)", json!("1111111111111111111111111111111111111111111111111111111111111111");
    i64_max_base2, "<int(9223372036854775807).<string(2)", json!("111111111111111111111111111111111111111111111111111111111111111");
    i64_min_base2, "<int(-9223372036854775808).<string(2)", json!("-1000000000000000000000000000000000000000000000000000000000000000");
    i64_min_base2_2c, "<int(-9223372036854775808).<string(2, true)", json!("11111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000");
    u64_max_base3, "<int(18446744073709551615).<string(3)", json!("11112220022122120101211020120210210211220");
    i64_max_base3, "<int(9223372036854775807).<string(3)", json!("2021110011022210012102010021220101220221");
    u64_max_base8, "<int(18446744073709551615).<string(8)", json!("1777777777777777777777");
    i64_max_base8, "<int(9223372036854775807).<string(8)", json!("777777777777777777777");
    i64_min_base8, "<int(-9223372036854775808).<string(8)", json!("-1000000000000000000000");
    u64_max_base16, "<int(18446744073709551615).<string(16)", json!("ffffffffffffffff");
    i64_max_base16, "<int(9223372036854775807).<string(16)", json!("7fffffffffffffff");
    i64_min_base16, "<int(-9223372036854775808).<string(16)", json!("-8000000000000000");
    u64_max_base16_upper, "<int(18446744073709551615).<string(16, upper_case=true)", json!("FFFFFFFFFFFFFFFF");
    i64_min_base16_2c, "<int(-9223372036854775808).<string(16, true)", json!("ffffffffffffffff8000000000000000");
);

test_simple_query_err!(
    sqint_string_err,
    invalid_radix, "<int(10).<string(radix=37)", System;
);

test_simple_query_ok!(
    sqint_binary,
    i128_max, "<int(170141183460469231731687303715884105727).<binary", json!("1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111");
    i128_min, "<int(-170141183460469231731687303715884105728).<binary", json!("-10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000");
    u64_max, "<int(18446744073709551615).<binary", json!("1111111111111111111111111111111111111111111111111111111111111111");
    i64_max, "<int(9223372036854775807).<binary", json!("111111111111111111111111111111111111111111111111111111111111111");
    i64_min, "<int(-9223372036854775808).<binary", json!("-1000000000000000000000000000000000000000000000000000000000000000");
    i64_min_2c, "<int(-9223372036854775808).<binary(twos_complement=true)", json!("11111111111111111111111111111111111111111111111111111111111111111000000000000000000000000000000000000000000000000000000000000000");
    i64_max_with_prefix, "<int(9223372036854775807).<binary(prefix_radix=true)", json!("0b111111111111111111111111111111111111111111111111111111111111111");
    i64_min_with_prefix, "<int(-9223372036854775808).<binary(prefix_radix=true)", json!("0b-1000000000000000000000000000000000000000000000000000000000000000");
);

test_simple_query_ok!(
    sqint_octal,
    i128_max, "<int(170141183460469231731687303715884105727).<octal", json!("1777777777777777777777777777777777777777777");
    i128_min, "<int(-170141183460469231731687303715884105728).<octal", json!("-2000000000000000000000000000000000000000000");
    u64_max, "<int(18446744073709551615).<octal", json!("1777777777777777777777");
    i64_max, "<int(9223372036854775807).<octal", json!("777777777777777777777");
    i64_min, "<int(-9223372036854775808).<octal", json!("-1000000000000000000000");
    i64_max_with_prefix, "<int(9223372036854775807).<octal(prefix_radix=true)", json!("0o777777777777777777777");
    i64_min_with_prefix, "<int(-9223372036854775808).<octal(prefix_radix=true)", json!("0o-1000000000000000000000");
);

test_simple_query_ok!(
    sqint_hexadecimal,
    i128_max, "<int(170141183460469231731687303715884105727).<hexadecimal", json!("7fffffffffffffffffffffffffffffff");
    i128_min, "<int(-170141183460469231731687303715884105728).<hexadecimal", json!("-80000000000000000000000000000000");
    u64_max, "<int(18446744073709551615).<hexadecimal", json!("ffffffffffffffff");
    i64_max, "<int(9223372036854775807).<hexadecimal", json!("7fffffffffffffff");
    i64_min, "<int(-9223372036854775808).<hexadecimal", json!("-8000000000000000");
    i64_max_with_prefix, "<int(9223372036854775807).<hexadecimal(prefix_radix=true)", json!("0x7fffffffffffffff");
    i64_min_with_prefix, "<int(-9223372036854775808).<hexadecimal(prefix_radix=true)", json!("0x-8000000000000000");
    i64_max_with_upper, "<int(9223372036854775807).<hexadecimal(upper_case=true)", json!("7FFFFFFFFFFFFFFF");
    i64_min_2c, "<int(-9223372036854775808).<hexadecimal(twos_complement=true)", json!("ffffffffffffffff8000000000000000");
);
